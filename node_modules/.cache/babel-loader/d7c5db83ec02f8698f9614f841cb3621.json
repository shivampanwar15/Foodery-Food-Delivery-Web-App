{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _objectSpread = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/objectSpread\");\nvar _inherits = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _setPrototypeOf = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/setPrototypeOf\");\nvar _regeneratorRuntime = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nfunction _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, void 0, groups); }; var _super = RegExp.prototype, _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype); } function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { var i = g[name]; if (\"number\" == typeof i) groups[name] = result[i];else { for (var k = 0; void 0 === result[i[k]] && k + 1 < i.length;) k++; groups[name] = result[i[k]]; } return groups; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) { result.groups = buildGroups(result, this); var indices = result.indices; indices && (indices.groups = buildGroups(indices, this)); } return result; }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (\"string\" == typeof substitution) { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) { var group = groups[name]; return \"$\" + (Array.isArray(group) ? group.join(\"$\") : group); })); } if (\"function\" == typeof substitution) { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; return \"object\" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args); }); } return _super[Symbol.replace].call(this, str, substitution); }, _wrapRegExp.apply(this, arguments); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\nvar child_process_1 = require(\"child_process\");\nvar fs = require(\"fs\");\nvar gcpMetadata = require(\"gcp-metadata\");\nvar os = require(\"os\");\nvar path = require(\"path\");\nvar crypto_1 = require(\"../crypto/crypto\");\nvar transporters_1 = require(\"../transporters\");\nvar computeclient_1 = require(\"./computeclient\");\nvar idtokenclient_1 = require(\"./idtokenclient\");\nvar envDetect_1 = require(\"./envDetect\");\nvar jwtclient_1 = require(\"./jwtclient\");\nvar refreshclient_1 = require(\"./refreshclient\");\nvar impersonated_1 = require(\"./impersonated\");\nvar externalclient_1 = require(\"./externalclient\");\nvar baseexternalclient_1 = require(\"./baseexternalclient\");\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\nvar GoogleAuthExceptionMessages = {\n  NO_PROJECT_ID_FOUND: 'Unable to detect a Project Id in the current environment. \\n' + 'To learn more about authentication and Google APIs, visit: \\n' + 'https://cloud.google.com/docs/authentication/getting-started'\n};\nvar GoogleAuth = /*#__PURE__*/function () {\n  function GoogleAuth(opts) {\n    _classCallCheck(this, GoogleAuth);\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined;\n    // To save the contents of the JSON credential file\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.cachedCredential = opts.authClient || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  }\n  // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n  _createClass(GoogleAuth, [{\n    key: \"setGapicJWTValues\",\n    // GAPIC client libraries should always use self-signed JWTs. The following\n    // variables are set on the JWT client in order to indicate the type of library,\n    // and sign the JWT with the correct audience and scopes (if not supplied).\n    value: function setGapicJWTValues(client) {\n      client.defaultServicePath = this.defaultServicePath;\n      client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n      client.defaultScopes = this.defaultScopes;\n    }\n  }, {\n    key: \"getProjectId\",\n    value: function getProjectId(callback) {\n      if (callback) {\n        this.getProjectIdAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getProjectIdAsync();\n      }\n    }\n    /**\n     * A temporary method for internal `getProjectId` usages where `null` is\n     * acceptable. In a future major release, `getProjectId` should return `null`\n     * (as the `Promise<string | null>` base signature describes) and this private\n     * method should be removed.\n     *\n     * @returns Promise that resolves with project id (or `null`)\n     */\n  }, {\n    key: \"getProjectIdOptional\",\n    value: function () {\n      var _getProjectIdOptional = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return this.getProjectId();\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](0);\n              if (!(_context.t0 instanceof Error && _context.t0.message === GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND)) {\n                _context.next = 12;\n                break;\n              }\n              return _context.abrupt(\"return\", null);\n            case 12:\n              throw _context.t0;\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 6]]);\n      }));\n      function getProjectIdOptional() {\n        return _getProjectIdOptional.apply(this, arguments);\n      }\n      return getProjectIdOptional;\n    }()\n    /*\n     * A private method for finding and caching a projectId.\n     *\n     * Supports environments in order of precedence:\n     * - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n     * - GOOGLE_APPLICATION_CREDENTIALS JSON file\n     * - Cloud SDK: `gcloud config config-helper --format json`\n     * - GCE project ID from metadata server\n     *\n     * @returns projectId\n     */\n  }, {\n    key: \"findAndCacheProjectId\",\n    value: function () {\n      var _findAndCacheProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var projectId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              projectId = null;\n              _context2.t0 = projectId;\n              if (_context2.t0) {\n                _context2.next = 6;\n                break;\n              }\n              _context2.next = 5;\n              return this.getProductionProjectId();\n            case 5:\n              projectId = _context2.sent;\n            case 6:\n              _context2.t1 = projectId;\n              if (_context2.t1) {\n                _context2.next = 11;\n                break;\n              }\n              _context2.next = 10;\n              return this.getFileProjectId();\n            case 10:\n              projectId = _context2.sent;\n            case 11:\n              _context2.t2 = projectId;\n              if (_context2.t2) {\n                _context2.next = 16;\n                break;\n              }\n              _context2.next = 15;\n              return this.getDefaultServiceProjectId();\n            case 15:\n              projectId = _context2.sent;\n            case 16:\n              _context2.t3 = projectId;\n              if (_context2.t3) {\n                _context2.next = 21;\n                break;\n              }\n              _context2.next = 20;\n              return this.getGCEProjectId();\n            case 20:\n              projectId = _context2.sent;\n            case 21:\n              _context2.t4 = projectId;\n              if (_context2.t4) {\n                _context2.next = 26;\n                break;\n              }\n              _context2.next = 25;\n              return this.getExternalAccountClientProjectId();\n            case 25:\n              projectId = _context2.sent;\n            case 26:\n              if (!projectId) {\n                _context2.next = 31;\n                break;\n              }\n              this._cachedProjectId = projectId;\n              return _context2.abrupt(\"return\", projectId);\n            case 31:\n              throw new Error(GoogleAuthExceptionMessages.NO_PROJECT_ID_FOUND);\n            case 32:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function findAndCacheProjectId() {\n        return _findAndCacheProjectId.apply(this, arguments);\n      }\n      return findAndCacheProjectId;\n    }()\n  }, {\n    key: \"getProjectIdAsync\",\n    value: function () {\n      var _getProjectIdAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!this._cachedProjectId) {\n                _context3.next = 2;\n                break;\n              }\n              return _context3.abrupt(\"return\", this._cachedProjectId);\n            case 2:\n              if (!this._findProjectIdPromise) {\n                this._findProjectIdPromise = this.findAndCacheProjectId();\n              }\n              return _context3.abrupt(\"return\", this._findProjectIdPromise);\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getProjectIdAsync() {\n        return _getProjectIdAsync.apply(this, arguments);\n      }\n      return getProjectIdAsync;\n    }()\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */\n  }, {\n    key: \"getAnyScopes\",\n    value: function getAnyScopes() {\n      return this.scopes || this.defaultScopes;\n    }\n  }, {\n    key: \"getApplicationDefault\",\n    value: function getApplicationDefault() {\n      var optionsOrCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      var options;\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n      if (callback) {\n        this.getApplicationDefaultAsync(options).then(function (r) {\n          return callback(null, r.credential, r.projectId);\n        }, callback);\n      } else {\n        return this.getApplicationDefaultAsync(options);\n      }\n    }\n  }, {\n    key: \"getApplicationDefaultAsync\",\n    value: function () {\n      var _getApplicationDefaultAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var options,\n          quotaProjectIdOverride,\n          credential,\n          isGCE,\n          _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              options = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : {};\n              if (!this.cachedCredential) {\n                _context4.next = 5;\n                break;\n              }\n              _context4.next = 4;\n              return this.prepareAndCacheADC(this.cachedCredential);\n            case 4:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 5:\n              // Since this is a 'new' ADC to cache we will use the environment variable\n              // if it's available. We prefer this value over the value from ADC.\n              quotaProjectIdOverride = process.env['GOOGLE_CLOUD_QUOTA_PROJECT'];\n              _context4.next = 8;\n              return this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n            case 8:\n              credential = _context4.sent;\n              if (!credential) {\n                _context4.next = 14;\n                break;\n              }\n              if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n              } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n              }\n              _context4.next = 13;\n              return this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n            case 13:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 14:\n              _context4.next = 16;\n              return this._tryGetApplicationCredentialsFromWellKnownFile(options);\n            case 16:\n              credential = _context4.sent;\n              if (!credential) {\n                _context4.next = 22;\n                break;\n              }\n              if (credential instanceof jwtclient_1.JWT) {\n                credential.scopes = this.scopes;\n              } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                credential.scopes = this.getAnyScopes();\n              }\n              _context4.next = 21;\n              return this.prepareAndCacheADC(credential, quotaProjectIdOverride);\n            case 21:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 22:\n              _context4.prev = 22;\n              _context4.next = 25;\n              return this._checkIsGCE();\n            case 25:\n              isGCE = _context4.sent;\n              _context4.next = 32;\n              break;\n            case 28:\n              _context4.prev = 28;\n              _context4.t0 = _context4[\"catch\"](22);\n              if (_context4.t0 instanceof Error) {\n                _context4.t0.message = \"Unexpected error determining execution environment: \".concat(_context4.t0.message);\n              }\n              throw _context4.t0;\n            case 32:\n              if (isGCE) {\n                _context4.next = 34;\n                break;\n              }\n              throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n            case 34:\n              // For GCE, just return a default ComputeClient. It will take care of\n              // the rest.\n              options.scopes = this.getAnyScopes();\n              _context4.next = 37;\n              return this.prepareAndCacheADC(new computeclient_1.Compute(options), quotaProjectIdOverride);\n            case 37:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 38:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[22, 28]]);\n      }));\n      function getApplicationDefaultAsync() {\n        return _getApplicationDefaultAsync.apply(this, arguments);\n      }\n      return getApplicationDefaultAsync;\n    }()\n  }, {\n    key: \"prepareAndCacheADC\",\n    value: function () {\n      var _prepareAndCacheADC = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(credential, quotaProjectIdOverride) {\n        var projectId;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.getProjectIdOptional();\n            case 2:\n              projectId = _context5.sent;\n              if (quotaProjectIdOverride) {\n                credential.quotaProjectId = quotaProjectIdOverride;\n              }\n              this.cachedCredential = credential;\n              return _context5.abrupt(\"return\", {\n                credential: credential,\n                projectId: projectId\n              });\n            case 6:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function prepareAndCacheADC(_x, _x2) {\n        return _prepareAndCacheADC.apply(this, arguments);\n      }\n      return prepareAndCacheADC;\n    }()\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n  }, {\n    key: \"_checkIsGCE\",\n    value: function () {\n      var _checkIsGCE2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              if (!(this.checkIsGCE === undefined)) {\n                _context6.next = 4;\n                break;\n              }\n              _context6.next = 3;\n              return gcpMetadata.isAvailable();\n            case 3:\n              this.checkIsGCE = _context6.sent;\n            case 4:\n              return _context6.abrupt(\"return\", this.checkIsGCE);\n            case 5:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _checkIsGCE() {\n        return _checkIsGCE2.apply(this, arguments);\n      }\n      return _checkIsGCE;\n    }()\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n  }, {\n    key: \"_tryGetApplicationCredentialsFromEnvironmentVariable\",\n    value: function () {\n      var _tryGetApplicationCredentialsFromEnvironmentVariable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(options) {\n        var credentialsPath;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n              if (!(!credentialsPath || credentialsPath.length === 0)) {\n                _context7.next = 3;\n                break;\n              }\n              return _context7.abrupt(\"return\", null);\n            case 3:\n              _context7.prev = 3;\n              return _context7.abrupt(\"return\", this._getApplicationCredentialsFromFilePath(credentialsPath, options));\n            case 7:\n              _context7.prev = 7;\n              _context7.t0 = _context7[\"catch\"](3);\n              if (_context7.t0 instanceof Error) {\n                _context7.t0.message = \"Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: \".concat(_context7.t0.message);\n              }\n              throw _context7.t0;\n            case 11:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[3, 7]]);\n      }));\n      function _tryGetApplicationCredentialsFromEnvironmentVariable(_x3) {\n        return _tryGetApplicationCredentialsFromEnvironmentVariable2.apply(this, arguments);\n      }\n      return _tryGetApplicationCredentialsFromEnvironmentVariable;\n    }()\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n  }, {\n    key: \"_tryGetApplicationCredentialsFromWellKnownFile\",\n    value: function () {\n      var _tryGetApplicationCredentialsFromWellKnownFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(options) {\n        var location, home, client;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              // First, figure out the location of the file, depending upon the OS type.\n              location = null;\n              if (this._isWindows()) {\n                // Windows\n                location = process.env['APPDATA'];\n              } else {\n                // Linux or Mac\n                home = process.env['HOME'];\n                if (home) {\n                  location = path.join(home, '.config');\n                }\n              }\n              // If we found the root path, expand it.\n              if (location) {\n                location = path.join(location, 'gcloud', 'application_default_credentials.json');\n                if (!fs.existsSync(location)) {\n                  location = null;\n                }\n              }\n              // The file does not exist.\n              if (location) {\n                _context8.next = 5;\n                break;\n              }\n              return _context8.abrupt(\"return\", null);\n            case 5:\n              _context8.next = 7;\n              return this._getApplicationCredentialsFromFilePath(location, options);\n            case 7:\n              client = _context8.sent;\n              return _context8.abrupt(\"return\", client);\n            case 9:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n      function _tryGetApplicationCredentialsFromWellKnownFile(_x4) {\n        return _tryGetApplicationCredentialsFromWellKnownFile2.apply(this, arguments);\n      }\n      return _tryGetApplicationCredentialsFromWellKnownFile;\n    }()\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n  }, {\n    key: \"_getApplicationCredentialsFromFilePath\",\n    value: function () {\n      var _getApplicationCredentialsFromFilePath2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(filePath) {\n        var options,\n          readStream,\n          _args9 = arguments;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              options = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n              if (!(!filePath || filePath.length === 0)) {\n                _context9.next = 3;\n                break;\n              }\n              throw new Error('The file path is invalid.');\n            case 3:\n              _context9.prev = 3;\n              // Resolve path to actual file in case of symlink. Expect a thrown error\n              // if not resolvable.\n              filePath = fs.realpathSync(filePath);\n              if (fs.lstatSync(filePath).isFile()) {\n                _context9.next = 7;\n                break;\n              }\n              throw new Error();\n            case 7:\n              _context9.next = 13;\n              break;\n            case 9:\n              _context9.prev = 9;\n              _context9.t0 = _context9[\"catch\"](3);\n              if (_context9.t0 instanceof Error) {\n                _context9.t0.message = \"The file at \".concat(filePath, \" does not exist, or it is not a file. \").concat(_context9.t0.message);\n              }\n              throw _context9.t0;\n            case 13:\n              // Now open a read stream on the file, and parse it.\n              readStream = fs.createReadStream(filePath);\n              return _context9.abrupt(\"return\", this.fromStream(readStream, options));\n            case 15:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[3, 9]]);\n      }));\n      function _getApplicationCredentialsFromFilePath(_x5) {\n        return _getApplicationCredentialsFromFilePath2.apply(this, arguments);\n      }\n      return _getApplicationCredentialsFromFilePath;\n    }()\n    /**\n     * Create a credentials instance using a given impersonated input options.\n     * @param json The impersonated input object.\n     * @returns JWT or UserRefresh Client with data\n     */\n  }, {\n    key: \"fromImpersonatedJSON\",\n    value: function fromImpersonatedJSON(json) {\n      var _a, _b, _c, _d;\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing an  impersonated refresh token');\n      }\n      if (json.type !== impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n        throw new Error(\"The incoming JSON object does not have the \\\"\".concat(impersonated_1.IMPERSONATED_ACCOUNT_TYPE, \"\\\" type\"));\n      }\n      if (!json.source_credentials) {\n        throw new Error('The incoming JSON object does not contain a source_credentials field');\n      }\n      if (!json.service_account_impersonation_url) {\n        throw new Error('The incoming JSON object does not contain a service_account_impersonation_url field');\n      }\n      // Create source client for impersonation\n      var sourceClient = new refreshclient_1.UserRefreshClient(json.source_credentials.client_id, json.source_credentials.client_secret, json.source_credentials.refresh_token);\n      // Extreact service account from service_account_impersonation_url\n      var targetPrincipal = (_b = (_a = /*#__PURE__*/_wrapRegExp(/([^/]+):generateAccessToken$/, {\n        target: 1\n      }).exec(json.service_account_impersonation_url)) === null || _a === void 0 ? void 0 : _a.groups) === null || _b === void 0 ? void 0 : _b.target;\n      if (!targetPrincipal) {\n        throw new RangeError(\"Cannot extract target principal from \".concat(json.service_account_impersonation_url));\n      }\n      var targetScopes = (_c = this.getAnyScopes()) !== null && _c !== void 0 ? _c : [];\n      var client = new impersonated_1.Impersonated({\n        delegates: (_d = json.delegates) !== null && _d !== void 0 ? _d : [],\n        sourceClient: sourceClient,\n        targetPrincipal: targetPrincipal,\n        targetScopes: Array.isArray(targetScopes) ? targetScopes : [targetScopes]\n      });\n      return client;\n    }\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json, options) {\n      var client;\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the Google auth settings.');\n      }\n      options = options || {};\n      if (json.type === 'authorized_user') {\n        client = new refreshclient_1.UserRefreshClient(options);\n        client.fromJSON(json);\n      } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n        client = this.fromImpersonatedJSON(json);\n      } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n        client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n        client.scopes = this.getAnyScopes();\n      } else {\n        options.scopes = this.scopes;\n        client = new jwtclient_1.JWT(options);\n        this.setGapicJWTValues(client);\n        client.fromJSON(json);\n      }\n      return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n  }, {\n    key: \"_cacheClientFromJSON\",\n    value: function _cacheClientFromJSON(json, options) {\n      var client;\n      // create either a UserRefreshClient or JWT client.\n      options = options || {};\n      if (json.type === 'authorized_user') {\n        client = new refreshclient_1.UserRefreshClient(options);\n        client.fromJSON(json);\n      } else if (json.type === impersonated_1.IMPERSONATED_ACCOUNT_TYPE) {\n        client = this.fromImpersonatedJSON(json);\n      } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n        client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n        client.scopes = this.getAnyScopes();\n      } else {\n        options.scopes = this.scopes;\n        client = new jwtclient_1.JWT(options);\n        this.setGapicJWTValues(client);\n        client.fromJSON(json);\n      }\n      // cache both raw data used to instantiate client and client itself.\n      this.jsonContent = json;\n      this.cachedCredential = client;\n      return client;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream) {\n      var optionsOrCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      var options = {};\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n      if (callback) {\n        this.fromStreamAsync(inputStream, options).then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream, options);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream, options) {\n      var _this2 = this;\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the Google auth settings.');\n        }\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            try {\n              var data = JSON.parse(s);\n              var r = _this2._cacheClientFromJSON(data, options);\n              return resolve(r);\n            } catch (err) {\n              // If we failed parsing this.keyFileName, assume that it\n              // is a PEM or p12 certificate:\n              if (!_this2.keyFilename) throw err;\n              var client = new jwtclient_1.JWT(_objectSpread({}, _this2.clientOptions, {\n                keyFile: _this2.keyFilename\n              }));\n              _this2.cachedCredential = client;\n              _this2.setGapicJWTValues(client);\n              return resolve(client);\n            }\n          } catch (err) {\n            return reject(err);\n          }\n        });\n      });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey, options) {\n      options = options || {};\n      var client = new jwtclient_1.JWT(options);\n      client.fromAPIKey(apiKey);\n      return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n  }, {\n    key: \"_isWindows\",\n    value: function _isWindows() {\n      var sys = os.platform();\n      if (sys && sys.length >= 3) {\n        if (sys.substring(0, 3).toLowerCase() === 'win') {\n          return true;\n        }\n      }\n      return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n  }, {\n    key: \"getDefaultServiceProjectId\",\n    value: function () {\n      var _getDefaultServiceProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", new Promise(function (resolve) {\n                (0, child_process_1.exec)('gcloud config config-helper --format json', function (err, stdout) {\n                  if (!err && stdout) {\n                    try {\n                      var projectId = JSON.parse(stdout).configuration.properties.core.project;\n                      resolve(projectId);\n                      return;\n                    } catch (e) {\n                      // ignore errors\n                    }\n                  }\n                  resolve(null);\n                });\n              }));\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }));\n      function getDefaultServiceProjectId() {\n        return _getDefaultServiceProjectId.apply(this, arguments);\n      }\n      return getDefaultServiceProjectId;\n    }()\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n  }, {\n    key: \"getProductionProjectId\",\n    value: function getProductionProjectId() {\n      return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n  }, {\n    key: \"getFileProjectId\",\n    value: function () {\n      var _getFileProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var creds, r;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              if (!this.cachedCredential) {\n                _context11.next = 2;\n                break;\n              }\n              return _context11.abrupt(\"return\", this.cachedCredential.projectId);\n            case 2:\n              if (!this.keyFilename) {\n                _context11.next = 8;\n                break;\n              }\n              _context11.next = 5;\n              return this.getClient();\n            case 5:\n              creds = _context11.sent;\n              if (!(creds && creds.projectId)) {\n                _context11.next = 8;\n                break;\n              }\n              return _context11.abrupt(\"return\", creds.projectId);\n            case 8:\n              _context11.next = 10;\n              return this._tryGetApplicationCredentialsFromEnvironmentVariable();\n            case 10:\n              r = _context11.sent;\n              if (!r) {\n                _context11.next = 15;\n                break;\n              }\n              return _context11.abrupt(\"return\", r.projectId);\n            case 15:\n              return _context11.abrupt(\"return\", null);\n            case 16:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function getFileProjectId() {\n        return _getFileProjectId.apply(this, arguments);\n      }\n      return getFileProjectId;\n    }()\n    /**\n     * Gets the project ID from external account client if available.\n     */\n  }, {\n    key: \"getExternalAccountClientProjectId\",\n    value: function () {\n      var _getExternalAccountClientProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var creds;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              if (!(!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE)) {\n                _context12.next = 2;\n                break;\n              }\n              return _context12.abrupt(\"return\", null);\n            case 2:\n              _context12.next = 4;\n              return this.getClient();\n            case 4:\n              creds = _context12.sent;\n              _context12.next = 7;\n              return creds.getProjectId();\n            case 7:\n              return _context12.abrupt(\"return\", _context12.sent);\n            case 8:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function getExternalAccountClientProjectId() {\n        return _getExternalAccountClientProjectId.apply(this, arguments);\n      }\n      return getExternalAccountClientProjectId;\n    }()\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n  }, {\n    key: \"getGCEProjectId\",\n    value: function () {\n      var _getGCEProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var r;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.prev = 0;\n              _context13.next = 3;\n              return gcpMetadata.project('project-id');\n            case 3:\n              r = _context13.sent;\n              return _context13.abrupt(\"return\", r);\n            case 7:\n              _context13.prev = 7;\n              _context13.t0 = _context13[\"catch\"](0);\n              return _context13.abrupt(\"return\", null);\n            case 10:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, null, [[0, 7]]);\n      }));\n      function getGCEProjectId() {\n        return _getGCEProjectId.apply(this, arguments);\n      }\n      return getGCEProjectId;\n    }()\n  }, {\n    key: \"getCredentials\",\n    value: function getCredentials(callback) {\n      if (callback) {\n        this.getCredentialsAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getCredentialsAsync();\n      }\n    }\n  }, {\n    key: \"getCredentialsAsync\",\n    value: function () {\n      var _getCredentialsAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var client, serviceAccountEmail, credential, isGCE, data;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.getClient();\n            case 2:\n              client = _context14.sent;\n              if (!(client instanceof baseexternalclient_1.BaseExternalAccountClient)) {\n                _context14.next = 7;\n                break;\n              }\n              serviceAccountEmail = client.getServiceAccountEmail();\n              if (!serviceAccountEmail) {\n                _context14.next = 7;\n                break;\n              }\n              return _context14.abrupt(\"return\", {\n                client_email: serviceAccountEmail\n              });\n            case 7:\n              if (!this.jsonContent) {\n                _context14.next = 10;\n                break;\n              }\n              credential = {\n                client_email: this.jsonContent.client_email,\n                private_key: this.jsonContent.private_key\n              };\n              return _context14.abrupt(\"return\", credential);\n            case 10:\n              _context14.next = 12;\n              return this._checkIsGCE();\n            case 12:\n              isGCE = _context14.sent;\n              if (isGCE) {\n                _context14.next = 15;\n                break;\n              }\n              throw new Error('Unknown error.');\n            case 15:\n              _context14.next = 17;\n              return gcpMetadata.instance({\n                property: 'service-accounts/',\n                params: {\n                  recursive: 'true'\n                }\n              });\n            case 17:\n              data = _context14.sent;\n              if (!(!data || !data.default || !data.default.email)) {\n                _context14.next = 20;\n                break;\n              }\n              throw new Error('Failure from metadata server.');\n            case 20:\n              return _context14.abrupt(\"return\", {\n                client_email: data.default.email\n              });\n            case 21:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function getCredentialsAsync() {\n        return _getCredentialsAsync.apply(this, arguments);\n      }\n      return getCredentialsAsync;\n    }()\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n  }, {\n    key: \"getClient\",\n    value: function () {\n      var _getClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        var filePath, stream;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              if (this.cachedCredential) {\n                _context15.next = 14;\n                break;\n              }\n              if (!this.jsonContent) {\n                _context15.next = 5;\n                break;\n              }\n              this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n              _context15.next = 14;\n              break;\n            case 5:\n              if (!this.keyFilename) {\n                _context15.next = 12;\n                break;\n              }\n              filePath = path.resolve(this.keyFilename);\n              stream = fs.createReadStream(filePath);\n              _context15.next = 10;\n              return this.fromStreamAsync(stream, this.clientOptions);\n            case 10:\n              _context15.next = 14;\n              break;\n            case 12:\n              _context15.next = 14;\n              return this.getApplicationDefaultAsync(this.clientOptions);\n            case 14:\n              return _context15.abrupt(\"return\", this.cachedCredential);\n            case 15:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function getClient() {\n        return _getClient.apply(this, arguments);\n      }\n      return getClient;\n    }()\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n  }, {\n    key: \"getIdTokenClient\",\n    value: function () {\n      var _getIdTokenClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(targetAudience) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) switch (_context16.prev = _context16.next) {\n            case 0:\n              _context16.next = 2;\n              return this.getClient();\n            case 2:\n              client = _context16.sent;\n              if ('fetchIdToken' in client) {\n                _context16.next = 5;\n                break;\n              }\n              throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n            case 5:\n              return _context16.abrupt(\"return\", new idtokenclient_1.IdTokenClient({\n                targetAudience: targetAudience,\n                idTokenProvider: client\n              }));\n            case 6:\n            case \"end\":\n              return _context16.stop();\n          }\n        }, _callee16, this);\n      }));\n      function getIdTokenClient(_x6) {\n        return _getIdTokenClient.apply(this, arguments);\n      }\n      return getIdTokenClient;\n    }()\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n  }, {\n    key: \"getAccessToken\",\n    value: function () {\n      var _getAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) switch (_context17.prev = _context17.next) {\n            case 0:\n              _context17.next = 2;\n              return this.getClient();\n            case 2:\n              client = _context17.sent;\n              _context17.next = 5;\n              return client.getAccessToken();\n            case 5:\n              return _context17.abrupt(\"return\", _context17.sent.token);\n            case 6:\n            case \"end\":\n              return _context17.stop();\n          }\n        }, _callee17, this);\n      }));\n      function getAccessToken() {\n        return _getAccessToken.apply(this, arguments);\n      }\n      return getAccessToken;\n    }()\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n  }, {\n    key: \"getRequestHeaders\",\n    value: function () {\n      var _getRequestHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(url) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              _context18.next = 2;\n              return this.getClient();\n            case 2:\n              client = _context18.sent;\n              return _context18.abrupt(\"return\", client.getRequestHeaders(url));\n            case 4:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, this);\n      }));\n      function getRequestHeaders(_x7) {\n        return _getRequestHeaders.apply(this, arguments);\n      }\n      return getRequestHeaders;\n    }()\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n  }, {\n    key: \"authorizeRequest\",\n    value: function () {\n      var _authorizeRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(opts) {\n        var url, client, headers;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              opts = opts || {};\n              url = opts.url || opts.uri;\n              _context19.next = 4;\n              return this.getClient();\n            case 4:\n              client = _context19.sent;\n              _context19.next = 7;\n              return client.getRequestHeaders(url);\n            case 7:\n              headers = _context19.sent;\n              opts.headers = Object.assign(opts.headers || {}, headers);\n              return _context19.abrupt(\"return\", opts);\n            case 10:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this);\n      }));\n      function authorizeRequest(_x8) {\n        return _authorizeRequest.apply(this, arguments);\n      }\n      return authorizeRequest;\n    }()\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(opts) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              _context20.next = 2;\n              return this.getClient();\n            case 2:\n              client = _context20.sent;\n              return _context20.abrupt(\"return\", client.request(opts));\n            case 4:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, this);\n      }));\n      function request(_x9) {\n        return _request.apply(this, arguments);\n      }\n      return request;\n    }()\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n  }, {\n    key: \"getEnv\",\n    value: function getEnv() {\n      return (0, envDetect_1.getEnv)();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(data) {\n        var client, crypto, _sign2, creds;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              _context21.next = 2;\n              return this.getClient();\n            case 2:\n              client = _context21.sent;\n              crypto = (0, crypto_1.createCrypto)();\n              if (!(client instanceof jwtclient_1.JWT && client.key)) {\n                _context21.next = 9;\n                break;\n              }\n              _context21.next = 7;\n              return crypto.sign(client.key, data);\n            case 7:\n              _sign2 = _context21.sent;\n              return _context21.abrupt(\"return\", _sign2);\n            case 9:\n              _context21.next = 11;\n              return this.getCredentials();\n            case 11:\n              creds = _context21.sent;\n              if (creds.client_email) {\n                _context21.next = 14;\n                break;\n              }\n              throw new Error('Cannot sign data without `client_email`.');\n            case 14:\n              return _context21.abrupt(\"return\", this.signBlob(crypto, creds.client_email, data));\n            case 15:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }));\n      function sign(_x10) {\n        return _sign.apply(this, arguments);\n      }\n      return sign;\n    }()\n  }, {\n    key: \"signBlob\",\n    value: function () {\n      var _signBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(crypto, emailOrUniqueId, data) {\n        var url, res;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              url = 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/' + \"\".concat(emailOrUniqueId, \":signBlob\");\n              _context22.next = 3;\n              return this.request({\n                method: 'POST',\n                url: url,\n                data: {\n                  payload: crypto.encodeBase64StringUtf8(data)\n                }\n              });\n            case 3:\n              res = _context22.sent;\n              return _context22.abrupt(\"return\", res.data.signedBlob);\n            case 5:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this);\n      }));\n      function signBlob(_x11, _x12, _x13) {\n        return _signBlob.apply(this, arguments);\n      }\n      return signBlob;\n    }()\n  }, {\n    key: \"isGCE\",\n    get: function get() {\n      return this.checkIsGCE;\n    }\n  }]);\n  return GoogleAuth;\n}();\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;","map":null,"metadata":{},"sourceType":"script"}