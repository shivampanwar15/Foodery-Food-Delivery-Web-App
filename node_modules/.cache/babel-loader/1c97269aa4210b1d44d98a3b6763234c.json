{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _regeneratorRuntime = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _setPrototypeOf = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/setPrototypeOf\");\nvar _classCallCheck = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _get = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\nvar _getPrototypeOf = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nfunction _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, void 0, groups); }; var _super = RegExp.prototype, _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); return _groups.set(_this, groups || _groups.get(re)), _setPrototypeOf(_this, BabelRegExp.prototype); } function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { var i = g[name]; if (\"number\" == typeof i) groups[name] = result[i];else { for (var k = 0; void 0 === result[i[k]] && k + 1 < i.length;) k++; groups[name] = result[i[k]]; } return groups; }, Object.create(null)); } return _inherits(BabelRegExp, RegExp), BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) { result.groups = buildGroups(result, this); var indices = result.indices; indices && (indices.groups = buildGroups(indices, this)); } return result; }, BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (\"string\" == typeof substitution) { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\\$<([^>]+)>/g, function (_, name) { var group = groups[name]; return \"$\" + (Array.isArray(group) ? group.join(\"$\") : group); })); } if (\"function\" == typeof substitution) { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; return \"object\" != typeof args[args.length - 1] && (args = [].slice.call(args)).push(buildGroups(args, _this)), substitution.apply(this, args); }); } return _super[Symbol.replace].call(this, str, substitution); }, _wrapRegExp.apply(this, arguments); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseExternalAccountClient = exports.CLOUD_RESOURCE_MANAGER = exports.EXTERNAL_ACCOUNT_TYPE = exports.EXPIRATION_TIME_OFFSET = void 0;\nvar stream = require(\"stream\");\nvar authclient_1 = require(\"./authclient\");\nvar sts = require(\"./stscredentials\");\n/**\n * The required token exchange grant_type: rfc8693#section-2.1\n */\nvar STS_GRANT_TYPE = 'urn:ietf:params:oauth:grant-type:token-exchange';\n/**\n * The requested token exchange requested_token_type: rfc8693#section-2.1\n */\nvar STS_REQUEST_TOKEN_TYPE = 'urn:ietf:params:oauth:token-type:access_token';\n/** The default OAuth scope to request when none is provided. */\nvar DEFAULT_OAUTH_SCOPE = 'https://www.googleapis.com/auth/cloud-platform';\n/** The google apis domain pattern. */\nvar GOOGLE_APIS_DOMAIN_PATTERN = '\\\\.googleapis\\\\.com$';\n/** The variable portion pattern in a Google APIs domain. */\nvar VARIABLE_PORTION_PATTERN = '[^\\\\.\\\\s\\\\/\\\\\\\\]+';\n/** Default impersonated token lifespan in seconds.*/\nvar DEFAULT_TOKEN_LIFESPAN = 3600;\n/**\n * Offset to take into account network delays and server clock skews.\n */\nexports.EXPIRATION_TIME_OFFSET = 5 * 60 * 1000;\n/**\n * The credentials JSON file type for external account clients.\n * There are 3 types of JSON configs:\n * 1. authorized_user => Google end user credential\n * 2. service_account => Google service account credential\n * 3. external_Account => non-GCP service (eg. AWS, Azure, K8s)\n */\nexports.EXTERNAL_ACCOUNT_TYPE = 'external_account';\n/** Cloud resource manager URL used to retrieve project information. */\nexports.CLOUD_RESOURCE_MANAGER = 'https://cloudresourcemanager.googleapis.com/v1/projects/';\n/** The workforce audience pattern. */\nvar WORKFORCE_AUDIENCE_PATTERN = '//iam.googleapis.com/locations/[^/]+/workforcePools/[^/]+/providers/.+';\n/**\n * Base external account client. This is used to instantiate AuthClients for\n * exchanging external account credentials for GCP access token and authorizing\n * requests to GCP APIs.\n * The base class implements common logic for exchanging various type of\n * external credentials for GCP access token. The logic of determining and\n * retrieving the external credential based on the environment and\n * credential_source will be left for the subclasses.\n */\nvar BaseExternalAccountClient = /*#__PURE__*/function (_authclient_1$AuthCli) {\n  _inherits(BaseExternalAccountClient, _authclient_1$AuthCli);\n  /**\n   * Instantiate a BaseExternalAccountClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  function BaseExternalAccountClient(options, additionalOptions) {\n    var _this;\n    _classCallCheck(this, BaseExternalAccountClient);\n    var _a, _b;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BaseExternalAccountClient).call(this));\n    if (options.type !== exports.EXTERNAL_ACCOUNT_TYPE) {\n      throw new Error(\"Expected \\\"\".concat(exports.EXTERNAL_ACCOUNT_TYPE, \"\\\" type but \") + \"received \\\"\".concat(options.type, \"\\\"\"));\n    }\n    _this.clientAuth = options.client_id ? {\n      confidentialClientType: 'basic',\n      clientId: options.client_id,\n      clientSecret: options.client_secret\n    } : undefined;\n    if (!_this.validateGoogleAPIsUrl('sts', options.token_url)) {\n      throw new Error(\"\\\"\".concat(options.token_url, \"\\\" is not a valid token url.\"));\n    }\n    _this.stsCredential = new sts.StsCredentials(options.token_url, _this.clientAuth);\n    // Default OAuth scope. This could be overridden via public property.\n    _this.scopes = [DEFAULT_OAUTH_SCOPE];\n    _this.cachedAccessToken = null;\n    _this.audience = options.audience;\n    _this.subjectTokenType = options.subject_token_type;\n    _this.quotaProjectId = options.quota_project_id;\n    _this.workforcePoolUserProject = options.workforce_pool_user_project;\n    var workforceAudiencePattern = new RegExp(WORKFORCE_AUDIENCE_PATTERN);\n    if (_this.workforcePoolUserProject && !_this.audience.match(workforceAudiencePattern)) {\n      throw new Error('workforcePoolUserProject should not be set for non-workforce pool ' + 'credentials.');\n    }\n    if (typeof options.service_account_impersonation_url !== 'undefined' && !_this.validateGoogleAPIsUrl('iamcredentials', options.service_account_impersonation_url)) {\n      throw new Error(\"\\\"\".concat(options.service_account_impersonation_url, \"\\\" is \") + 'not a valid service account impersonation url.');\n    }\n    _this.serviceAccountImpersonationUrl = options.service_account_impersonation_url;\n    _this.serviceAccountImpersonationLifetime = (_b = (_a = options.service_account_impersonation) === null || _a === void 0 ? void 0 : _a.token_lifetime_seconds) !== null && _b !== void 0 ? _b : DEFAULT_TOKEN_LIFESPAN;\n    // As threshold could be zero,\n    // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n    // zero value.\n    if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n      _this.eagerRefreshThresholdMillis = exports.EXPIRATION_TIME_OFFSET;\n    } else {\n      _this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n    }\n    _this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    _this.projectId = null;\n    _this.projectNumber = _this.getProjectNumber(_this.audience);\n    return _this;\n  }\n  /** The service account email to be impersonated, if available. */\n  _createClass(BaseExternalAccountClient, [{\n    key: \"getServiceAccountEmail\",\n    value: function getServiceAccountEmail() {\n      var _a;\n      if (this.serviceAccountImpersonationUrl) {\n        // Parse email from URL. The formal looks as follows:\n        // https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/name@project-id.iam.gserviceaccount.com:generateAccessToken\n        var re = /*#__PURE__*/_wrapRegExp(/serviceAccounts\\/([^:]+):generateAccessToken$/, {\n          email: 1\n        });\n        var result = re.exec(this.serviceAccountImpersonationUrl);\n        return ((_a = result === null || result === void 0 ? void 0 : result.groups) === null || _a === void 0 ? void 0 : _a.email) || null;\n      }\n      return null;\n    }\n    /**\n     * Provides a mechanism to inject GCP access tokens directly.\n     * When the provided credential expires, a new credential, using the\n     * external account options, is retrieved.\n     * @param credentials The Credentials object to set on the current client.\n     */\n  }, {\n    key: \"setCredentials\",\n    value: function setCredentials(credentials) {\n      _get(_getPrototypeOf(BaseExternalAccountClient.prototype), \"setCredentials\", this).call(this, credentials);\n      this.cachedAccessToken = credentials;\n    }\n    /**\n     * @return A promise that resolves with the current GCP access token\n     *   response. If the current credential is expired, a new one is retrieved.\n     */\n  }, {\n    key: \"getAccessToken\",\n    value: function () {\n      var _getAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!this.cachedAccessToken || this.isExpired(this.cachedAccessToken))) {\n                _context.next = 3;\n                break;\n              }\n              _context.next = 3;\n              return this.refreshAccessTokenAsync();\n            case 3:\n              return _context.abrupt(\"return\", {\n                token: this.cachedAccessToken.access_token,\n                res: this.cachedAccessToken.res\n              });\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getAccessToken() {\n        return _getAccessToken.apply(this, arguments);\n      }\n      return getAccessToken;\n    }()\n    /**\n     * The main authentication interface. It takes an optional url which when\n     * present is the endpoint being accessed, and returns a Promise which\n     * resolves with authorization header fields.\n     *\n     * The result has the form:\n     * { Authorization: 'Bearer <access_token_value>' }\n     */\n  }, {\n    key: \"getRequestHeaders\",\n    value: function () {\n      var _getRequestHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var accessTokenResponse, headers;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.getAccessToken();\n            case 2:\n              accessTokenResponse = _context2.sent;\n              headers = {\n                Authorization: \"Bearer \".concat(accessTokenResponse.token)\n              };\n              return _context2.abrupt(\"return\", this.addSharedMetadataHeaders(headers));\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getRequestHeaders() {\n        return _getRequestHeaders.apply(this, arguments);\n      }\n      return getRequestHeaders;\n    }()\n  }, {\n    key: \"request\",\n    value: function request(opts, callback) {\n      if (callback) {\n        this.requestAsync(opts).then(function (r) {\n          return callback(null, r);\n        }, function (e) {\n          return callback(e, e.response);\n        });\n      } else {\n        return this.requestAsync(opts);\n      }\n    }\n    /**\n     * @return A promise that resolves with the project ID corresponding to the\n     *   current workload identity pool or current workforce pool if\n     *   determinable. For workforce pool credential, it returns the project ID\n     *   corresponding to the workforcePoolUserProject.\n     *   This is introduced to match the current pattern of using the Auth\n     *   library:\n     *   const projectId = await auth.getProjectId();\n     *   const url = `https://dns.googleapis.com/dns/v1/projects/${projectId}`;\n     *   const res = await client.request({ url });\n     *   The resource may not have permission\n     *   (resourcemanager.projects.get) to call this API or the required\n     *   scopes may not be selected:\n     *   https://cloud.google.com/resource-manager/reference/rest/v1/projects/get#authorization-scopes\n     */\n  }, {\n    key: \"getProjectId\",\n    value: function () {\n      var _getProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var projectNumber, headers, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              projectNumber = this.projectNumber || this.workforcePoolUserProject;\n              if (!this.projectId) {\n                _context3.next = 5;\n                break;\n              }\n              return _context3.abrupt(\"return\", this.projectId);\n            case 5:\n              if (!projectNumber) {\n                _context3.next = 14;\n                break;\n              }\n              _context3.next = 8;\n              return this.getRequestHeaders();\n            case 8:\n              headers = _context3.sent;\n              _context3.next = 11;\n              return this.transporter.request({\n                headers: headers,\n                url: \"\".concat(exports.CLOUD_RESOURCE_MANAGER).concat(projectNumber),\n                responseType: 'json'\n              });\n            case 11:\n              response = _context3.sent;\n              this.projectId = response.data.projectId;\n              return _context3.abrupt(\"return\", this.projectId);\n            case 14:\n              return _context3.abrupt(\"return\", null);\n            case 15:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getProjectId() {\n        return _getProjectId.apply(this, arguments);\n      }\n      return getProjectId;\n    }()\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param retry Whether the current attempt is a retry after a failed attempt.\n     * @return A promise that resolves with the successful response.\n     */\n  }, {\n    key: \"requestAsync\",\n    value: function () {\n      var _requestAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(opts) {\n        var retry,\n          response,\n          requestHeaders,\n          res,\n          statusCode,\n          isReadableStream,\n          isAuthErr,\n          _args4 = arguments;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              retry = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;\n              _context4.prev = 1;\n              _context4.next = 4;\n              return this.getRequestHeaders();\n            case 4:\n              requestHeaders = _context4.sent;\n              opts.headers = opts.headers || {};\n              if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n              }\n              if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n              }\n              _context4.next = 10;\n              return this.transporter.request(opts);\n            case 10:\n              response = _context4.sent;\n              _context4.next = 27;\n              break;\n            case 13:\n              _context4.prev = 13;\n              _context4.t0 = _context4[\"catch\"](1);\n              res = _context4.t0.response;\n              if (!res) {\n                _context4.next = 26;\n                break;\n              }\n              statusCode = res.status; // Retry the request for metadata if the following criteria are true:\n              // - We haven't already retried.  It only makes sense to retry once.\n              // - The response was a 401 or a 403\n              // - The request didn't send a readableStream\n              // - forceRefreshOnFailure is true\n              isReadableStream = res.config.data instanceof stream.Readable;\n              isAuthErr = statusCode === 401 || statusCode === 403;\n              if (!(!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure)) {\n                _context4.next = 26;\n                break;\n              }\n              _context4.next = 23;\n              return this.refreshAccessTokenAsync();\n            case 23:\n              _context4.next = 25;\n              return this.requestAsync(opts, true);\n            case 25:\n              return _context4.abrupt(\"return\", _context4.sent);\n            case 26:\n              throw _context4.t0;\n            case 27:\n              return _context4.abrupt(\"return\", response);\n            case 28:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[1, 13]]);\n      }));\n      function requestAsync(_x) {\n        return _requestAsync.apply(this, arguments);\n      }\n      return requestAsync;\n    }()\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * External credentials are exchanged for GCP access tokens via the token\n     * exchange endpoint and other settings provided in the client options\n     * object.\n     * If the service_account_impersonation_url is provided, an additional\n     * step to exchange the external account GCP access token for a service\n     * account impersonated token is performed.\n     * @return A promise that resolves with the fresh GCP access tokens.\n     */\n  }, {\n    key: \"refreshAccessTokenAsync\",\n    value: function () {\n      var _refreshAccessTokenAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var subjectToken, stsCredentialsOptions, additionalOptions, stsResponse;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return this.retrieveSubjectToken();\n            case 2:\n              subjectToken = _context5.sent;\n              // Construct the STS credentials options.\n              stsCredentialsOptions = {\n                grantType: STS_GRANT_TYPE,\n                audience: this.audience,\n                requestedTokenType: STS_REQUEST_TOKEN_TYPE,\n                subjectToken: subjectToken,\n                subjectTokenType: this.subjectTokenType,\n                // generateAccessToken requires the provided access token to have\n                // scopes:\n                // https://www.googleapis.com/auth/iam or\n                // https://www.googleapis.com/auth/cloud-platform\n                // The new service account access token scopes will match the user\n                // provided ones.\n                scope: this.serviceAccountImpersonationUrl ? [DEFAULT_OAUTH_SCOPE] : this.getScopesArray()\n              }; // Exchange the external credentials for a GCP access token.\n              // Client auth is prioritized over passing the workforcePoolUserProject\n              // parameter for STS token exchange.\n              additionalOptions = !this.clientAuth && this.workforcePoolUserProject ? {\n                userProject: this.workforcePoolUserProject\n              } : undefined;\n              _context5.next = 7;\n              return this.stsCredential.exchangeToken(stsCredentialsOptions, undefined, additionalOptions);\n            case 7:\n              stsResponse = _context5.sent;\n              if (!this.serviceAccountImpersonationUrl) {\n                _context5.next = 14;\n                break;\n              }\n              _context5.next = 11;\n              return this.getImpersonatedAccessToken(stsResponse.access_token);\n            case 11:\n              this.cachedAccessToken = _context5.sent;\n              _context5.next = 15;\n              break;\n            case 14:\n              if (stsResponse.expires_in) {\n                // Save response in cached access token.\n                this.cachedAccessToken = {\n                  access_token: stsResponse.access_token,\n                  expiry_date: new Date().getTime() + stsResponse.expires_in * 1000,\n                  res: stsResponse.res\n                };\n              } else {\n                // Save response in cached access token.\n                this.cachedAccessToken = {\n                  access_token: stsResponse.access_token,\n                  res: stsResponse.res\n                };\n              }\n            case 15:\n              // Save credentials.\n              this.credentials = {};\n              Object.assign(this.credentials, this.cachedAccessToken);\n              delete this.credentials.res;\n              // Trigger tokens event to notify external listeners.\n              this.emit('tokens', {\n                refresh_token: null,\n                expiry_date: this.cachedAccessToken.expiry_date,\n                access_token: this.cachedAccessToken.access_token,\n                token_type: 'Bearer',\n                id_token: null\n              });\n              // Return the cached access token.\n              return _context5.abrupt(\"return\", this.cachedAccessToken);\n            case 20:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function refreshAccessTokenAsync() {\n        return _refreshAccessTokenAsync.apply(this, arguments);\n      }\n      return refreshAccessTokenAsync;\n    }()\n    /**\n     * Returns the workload identity pool project number if it is determinable\n     * from the audience resource name.\n     * @param audience The STS audience used to determine the project number.\n     * @return The project number associated with the workload identity pool, if\n     *   this can be determined from the STS audience field. Otherwise, null is\n     *   returned.\n     */\n  }, {\n    key: \"getProjectNumber\",\n    value: function getProjectNumber(audience) {\n      // STS audience pattern:\n      // //iam.googleapis.com/projects/$PROJECT_NUMBER/locations/...\n      var match = audience.match(/\\/projects\\/([^/]+)/);\n      if (!match) {\n        return null;\n      }\n      return match[1];\n    }\n    /**\n     * Exchanges an external account GCP access token for a service\n     * account impersonated access token using iamcredentials\n     * GenerateAccessToken API.\n     * @param token The access token to exchange for a service account access\n     *   token.\n     * @return A promise that resolves with the service account impersonated\n     *   credentials response.\n     */\n  }, {\n    key: \"getImpersonatedAccessToken\",\n    value: function () {\n      var _getImpersonatedAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(token) {\n        var opts, response, successResponse;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              opts = {\n                url: this.serviceAccountImpersonationUrl,\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  Authorization: \"Bearer \".concat(token)\n                },\n                data: {\n                  scope: this.getScopesArray(),\n                  lifetime: this.serviceAccountImpersonationLifetime + 's'\n                },\n                responseType: 'json'\n              };\n              _context6.next = 3;\n              return this.transporter.request(opts);\n            case 3:\n              response = _context6.sent;\n              successResponse = response.data;\n              return _context6.abrupt(\"return\", {\n                access_token: successResponse.accessToken,\n                // Convert from ISO format to timestamp.\n                expiry_date: new Date(successResponse.expireTime).getTime(),\n                res: response\n              });\n            case 6:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getImpersonatedAccessToken(_x2) {\n        return _getImpersonatedAccessToken.apply(this, arguments);\n      }\n      return getImpersonatedAccessToken;\n    }()\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param accessToken The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n  }, {\n    key: \"isExpired\",\n    value: function isExpired(accessToken) {\n      var now = new Date().getTime();\n      return accessToken.expiry_date ? now >= accessToken.expiry_date - this.eagerRefreshThresholdMillis : false;\n    }\n    /**\n     * @return The list of scopes for the requested GCP access token.\n     */\n  }, {\n    key: \"getScopesArray\",\n    value: function getScopesArray() {\n      // Since scopes can be provided as string or array, the type should\n      // be normalized.\n      if (typeof this.scopes === 'string') {\n        return [this.scopes];\n      } else if (typeof this.scopes === 'undefined') {\n        return [DEFAULT_OAUTH_SCOPE];\n      } else {\n        return this.scopes;\n      }\n    }\n    /**\n     * Checks whether Google APIs URL is valid.\n     * @param apiName The apiName of url.\n     * @param url The Google API URL to validate.\n     * @return Whether the URL is valid or not.\n     */\n  }, {\n    key: \"validateGoogleAPIsUrl\",\n    value: function validateGoogleAPIsUrl(apiName, url) {\n      var parsedUrl;\n      // Return false if error is thrown during parsing URL.\n      try {\n        parsedUrl = new URL(url);\n      } catch (e) {\n        return false;\n      }\n      var urlDomain = parsedUrl.hostname;\n      // Check the protocol is https.\n      if (parsedUrl.protocol !== 'https:') {\n        return false;\n      }\n      var googleAPIsDomainPatterns = [new RegExp('^' + VARIABLE_PORTION_PATTERN + '\\\\.' + apiName + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + apiName + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + apiName + '\\\\.' + VARIABLE_PORTION_PATTERN + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + VARIABLE_PORTION_PATTERN + '\\\\-' + apiName + GOOGLE_APIS_DOMAIN_PATTERN), new RegExp('^' + apiName + '\\\\-' + VARIABLE_PORTION_PATTERN + '\\\\.p' + GOOGLE_APIS_DOMAIN_PATTERN)];\n      for (var _i = 0, _googleAPIsDomainPatt = googleAPIsDomainPatterns; _i < _googleAPIsDomainPatt.length; _i++) {\n        var googleAPIsDomainPattern = _googleAPIsDomainPatt[_i];\n        if (urlDomain.match(googleAPIsDomainPattern)) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }]);\n  return BaseExternalAccountClient;\n}(authclient_1.AuthClient);\nexports.BaseExternalAccountClient = BaseExternalAccountClient;","map":null,"metadata":{},"sourceType":"script"}