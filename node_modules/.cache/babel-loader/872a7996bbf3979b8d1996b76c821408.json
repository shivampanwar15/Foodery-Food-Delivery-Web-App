{"ast":null,"code":"\"use strict\";\n\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _regeneratorRuntime = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _slicedToArray = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nvar _asyncToGenerator = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRetryConfig = void 0;\nfunction getRetryConfig(_x) {\n  return _getRetryConfig.apply(this, arguments);\n}\nfunction _getRetryConfig() {\n  _getRetryConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(err) {\n    var _a, config, retryRanges, shouldRetryFn, retryDelay, delay, backoff;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          config = getConfig(err);\n          if (!(!err || !err.config || !config && !err.config.retry)) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\", {\n            shouldRetry: false\n          });\n        case 3:\n          config = config || {};\n          config.currentRetryAttempt = config.currentRetryAttempt || 0;\n          config.retry = config.retry === undefined || config.retry === null ? 3 : config.retry;\n          config.httpMethodsToRetry = config.httpMethodsToRetry || ['GET', 'HEAD', 'PUT', 'OPTIONS', 'DELETE'];\n          config.noResponseRetries = config.noResponseRetries === undefined || config.noResponseRetries === null ? 2 : config.noResponseRetries;\n          // If this wasn't in the list of status codes where we want\n          // to automatically retry, return.\n          retryRanges = [\n          // https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\n          // 1xx - Retry (Informational, request still processing)\n          // 2xx - Do not retry (Success)\n          // 3xx - Do not retry (Redirect)\n          // 4xx - Do not retry (Client errors)\n          // 429 - Retry (\"Too Many Requests\")\n          // 5xx - Retry (Server errors)\n          [100, 199], [429, 429], [500, 599]];\n          config.statusCodesToRetry = config.statusCodesToRetry || retryRanges;\n          // Put the config back into the err\n          err.config.retryConfig = config;\n          // Determine if we should retry the request\n          shouldRetryFn = config.shouldRetry || shouldRetryRequest;\n          _context.next = 14;\n          return shouldRetryFn(err);\n        case 14:\n          if (_context.sent) {\n            _context.next = 16;\n            break;\n          }\n          return _context.abrupt(\"return\", {\n            shouldRetry: false,\n            config: err.config\n          });\n        case 16:\n          // Calculate time to wait with exponential backoff.\n          // If this is the first retry, look for a configured retryDelay.\n          retryDelay = config.currentRetryAttempt ? 0 : (_a = config.retryDelay) !== null && _a !== void 0 ? _a : 100; // Formula: retryDelay + ((2^c - 1 / 2) * 1000)\n          delay = retryDelay + (Math.pow(2, config.currentRetryAttempt) - 1) / 2 * 1000; // We're going to retry!  Incremenent the counter.\n          err.config.retryConfig.currentRetryAttempt += 1;\n          // Create a promise that invokes the retry after the backOffDelay\n          backoff = config.retryBackoff ? config.retryBackoff(err, delay) : new Promise(function (resolve) {\n            setTimeout(resolve, delay);\n          }); // Notify the user if they added an `onRetryAttempt` handler\n          if (config.onRetryAttempt) {\n            config.onRetryAttempt(err);\n          }\n          // Return the promise in which recalls Gaxios to retry the request\n          _context.next = 23;\n          return backoff;\n        case 23:\n          return _context.abrupt(\"return\", {\n            shouldRetry: true,\n            config: err.config\n          });\n        case 24:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _getRetryConfig.apply(this, arguments);\n}\nexports.getRetryConfig = getRetryConfig;\n/**\n * Determine based on config if we should retry the request.\n * @param err The GaxiosError passed to the interceptor.\n */\nfunction shouldRetryRequest(err) {\n  var config = getConfig(err);\n  // node-fetch raises an AbortError if signaled:\n  // https://github.com/bitinn/node-fetch#request-cancellation-with-abortsignal\n  if (err.name === 'AbortError') {\n    return false;\n  }\n  // If there's no config, or retries are disabled, return.\n  if (!config || config.retry === 0) {\n    return false;\n  }\n  // Check if this error has no response (ETIMEDOUT, ENOTFOUND, etc)\n  if (!err.response && (config.currentRetryAttempt || 0) >= config.noResponseRetries) {\n    return false;\n  }\n  // Only retry with configured HttpMethods.\n  if (!err.config.method || config.httpMethodsToRetry.indexOf(err.config.method.toUpperCase()) < 0) {\n    return false;\n  }\n  // If this wasn't in the list of status codes where we want\n  // to automatically retry, return.\n  if (err.response && err.response.status) {\n    var isInRange = false;\n    var _iterator = _createForOfIteratorHelper(config.statusCodesToRetry),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n          min = _step$value[0],\n          max = _step$value[1];\n        var status = err.response.status;\n        if (status >= min && status <= max) {\n          isInRange = true;\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (!isInRange) {\n      return false;\n    }\n  }\n  // If we are out of retry attempts, return\n  config.currentRetryAttempt = config.currentRetryAttempt || 0;\n  if (config.currentRetryAttempt >= config.retry) {\n    return false;\n  }\n  return true;\n}\n/**\n * Acquire the raxConfig object from an GaxiosError if available.\n * @param err The Gaxios error with a config object.\n */\nfunction getConfig(err) {\n  if (err && err.config && err.config.retryConfig) {\n    return err.config.retryConfig;\n  }\n  return;\n}","map":null,"metadata":{},"sourceType":"script"}