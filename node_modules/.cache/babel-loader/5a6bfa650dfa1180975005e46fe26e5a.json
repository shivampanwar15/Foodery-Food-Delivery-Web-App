{"ast":null,"code":"\"use strict\";\n\n// Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _regeneratorRuntime = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdentityPoolClient = void 0;\nvar fs = require(\"fs\");\nvar util_1 = require(\"util\");\nvar baseexternalclient_1 = require(\"./baseexternalclient\");\n// fs.readfile is undefined in browser karma tests causing\n// `npm run browser-test` to fail as test.oauth2.ts imports this file via\n// src/index.ts.\n// Fallback to void function to avoid promisify throwing a TypeError.\nvar readFile = (0, util_1.promisify)((_a = fs.readFile) !== null && _a !== void 0 ? _a : function () {});\nvar realpath = (0, util_1.promisify)((_b = fs.realpath) !== null && _b !== void 0 ? _b : function () {});\nvar lstat = (0, util_1.promisify)((_c = fs.lstat) !== null && _c !== void 0 ? _c : function () {});\n/**\n * Defines the Url-sourced and file-sourced external account clients mainly\n * used for K8s and Azure workloads.\n */\nvar IdentityPoolClient = /*#__PURE__*/function (_baseexternalclient_) {\n  _inherits(IdentityPoolClient, _baseexternalclient_);\n  /**\n   * Instantiate an IdentityPoolClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid file-sourced or\n   * url-sourced credential or a workforce pool user project is provided\n   * with a non workforce audience.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  function IdentityPoolClient(options, additionalOptions) {\n    var _this;\n    _classCallCheck(this, IdentityPoolClient);\n    var _a, _b;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IdentityPoolClient).call(this, options, additionalOptions));\n    _this.file = options.credential_source.file;\n    _this.url = options.credential_source.url;\n    _this.headers = options.credential_source.headers;\n    if (!_this.file && !_this.url) {\n      throw new Error('No valid Identity Pool \"credential_source\" provided');\n    }\n    // Text is the default format type.\n    _this.formatType = ((_a = options.credential_source.format) === null || _a === void 0 ? void 0 : _a.type) || 'text';\n    _this.formatSubjectTokenFieldName = (_b = options.credential_source.format) === null || _b === void 0 ? void 0 : _b.subject_token_field_name;\n    if (_this.formatType !== 'json' && _this.formatType !== 'text') {\n      throw new Error(\"Invalid credential_source format \\\"\".concat(_this.formatType, \"\\\"\"));\n    }\n    if (_this.formatType === 'json' && !_this.formatSubjectTokenFieldName) {\n      throw new Error('Missing subject_token_field_name for JSON credential_source format');\n    }\n    return _this;\n  }\n  /**\n   * Triggered when a external subject token is needed to be exchanged for a GCP\n   * access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this either retrieves the local credential from a file location (k8s\n   * workload) or by sending a GET request to a local metadata server (Azure\n   * workloads).\n   * @return A promise that resolves with the external subject token.\n   */\n  _createClass(IdentityPoolClient, [{\n    key: \"retrieveSubjectToken\",\n    value: function () {\n      var _retrieveSubjectToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!this.file) {\n                _context.next = 4;\n                break;\n              }\n              _context.next = 3;\n              return this.getTokenFromFile(this.file, this.formatType, this.formatSubjectTokenFieldName);\n            case 3:\n              return _context.abrupt(\"return\", _context.sent);\n            case 4:\n              _context.next = 6;\n              return this.getTokenFromUrl(this.url, this.formatType, this.formatSubjectTokenFieldName, this.headers);\n            case 6:\n              return _context.abrupt(\"return\", _context.sent);\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function retrieveSubjectToken() {\n        return _retrieveSubjectToken.apply(this, arguments);\n      }\n      return retrieveSubjectToken;\n    }()\n    /**\n     * Looks up the external subject token in the file path provided and\n     * resolves with that token.\n     * @param file The file path where the external credential is located.\n     * @param formatType The token file or URL response type (JSON or text).\n     * @param formatSubjectTokenFieldName For JSON response types, this is the\n     *   subject_token field name. For Azure, this is access_token. For text\n     *   response types, this is ignored.\n     * @return A promise that resolves with the external subject token.\n     */\n  }, {\n    key: \"getTokenFromFile\",\n    value: function () {\n      var _getTokenFromFile = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filePath, formatType, formatSubjectTokenFieldName) {\n        var subjectToken, rawText, json;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return realpath(filePath);\n            case 3:\n              filePath = _context2.sent;\n              _context2.next = 6;\n              return lstat(filePath);\n            case 6:\n              if (_context2.sent.isFile()) {\n                _context2.next = 8;\n                break;\n              }\n              throw new Error();\n            case 8:\n              _context2.next = 14;\n              break;\n            case 10:\n              _context2.prev = 10;\n              _context2.t0 = _context2[\"catch\"](0);\n              if (_context2.t0 instanceof Error) {\n                _context2.t0.message = \"The file at \".concat(filePath, \" does not exist, or it is not a file. \").concat(_context2.t0.message);\n              }\n              throw _context2.t0;\n            case 14:\n              _context2.next = 16;\n              return readFile(filePath, {\n                encoding: 'utf8'\n              });\n            case 16:\n              rawText = _context2.sent;\n              if (formatType === 'text') {\n                subjectToken = rawText;\n              } else if (formatType === 'json' && formatSubjectTokenFieldName) {\n                json = JSON.parse(rawText);\n                subjectToken = json[formatSubjectTokenFieldName];\n              }\n              if (subjectToken) {\n                _context2.next = 20;\n                break;\n              }\n              throw new Error('Unable to parse the subject_token from the credential_source file');\n            case 20:\n              return _context2.abrupt(\"return\", subjectToken);\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 10]]);\n      }));\n      function getTokenFromFile(_x, _x2, _x3) {\n        return _getTokenFromFile.apply(this, arguments);\n      }\n      return getTokenFromFile;\n    }()\n    /**\n     * Sends a GET request to the URL provided and resolves with the returned\n     * external subject token.\n     * @param url The URL to call to retrieve the subject token. This is typically\n     *   a local metadata server.\n     * @param formatType The token file or URL response type (JSON or text).\n     * @param formatSubjectTokenFieldName For JSON response types, this is the\n     *   subject_token field name. For Azure, this is access_token. For text\n     *   response types, this is ignored.\n     * @param headers The optional additional headers to send with the request to\n     *   the metadata server url.\n     * @return A promise that resolves with the external subject token.\n     */\n  }, {\n    key: \"getTokenFromUrl\",\n    value: function () {\n      var _getTokenFromUrl = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(url, formatType, formatSubjectTokenFieldName, headers) {\n        var opts, subjectToken, response, _response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              opts = {\n                url: url,\n                method: 'GET',\n                headers: headers,\n                responseType: formatType\n              };\n              if (!(formatType === 'text')) {\n                _context3.next = 8;\n                break;\n              }\n              _context3.next = 4;\n              return this.transporter.request(opts);\n            case 4:\n              response = _context3.sent;\n              subjectToken = response.data;\n              _context3.next = 13;\n              break;\n            case 8:\n              if (!(formatType === 'json' && formatSubjectTokenFieldName)) {\n                _context3.next = 13;\n                break;\n              }\n              _context3.next = 11;\n              return this.transporter.request(opts);\n            case 11:\n              _response = _context3.sent;\n              subjectToken = _response.data[formatSubjectTokenFieldName];\n            case 13:\n              if (subjectToken) {\n                _context3.next = 15;\n                break;\n              }\n              throw new Error('Unable to parse the subject_token from the credential_source URL');\n            case 15:\n              return _context3.abrupt(\"return\", subjectToken);\n            case 16:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getTokenFromUrl(_x4, _x5, _x6, _x7) {\n        return _getTokenFromUrl.apply(this, arguments);\n      }\n      return getTokenFromUrl;\n    }()\n  }]);\n  return IdentityPoolClient;\n}(baseexternalclient_1.BaseExternalAccountClient);\nexports.IdentityPoolClient = IdentityPoolClient;","map":null,"metadata":{},"sourceType":"script"}