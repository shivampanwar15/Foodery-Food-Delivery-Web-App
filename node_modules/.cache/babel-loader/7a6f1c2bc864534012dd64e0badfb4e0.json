{"ast":null,"code":"\"use strict\";\n\n// Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _regeneratorRuntime = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _possibleConstructorReturn = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IdTokenClient = void 0;\nvar oauth2client_1 = require(\"./oauth2client\");\nvar IdTokenClient = /*#__PURE__*/function (_oauth2client_1$OAuth) {\n  _inherits(IdTokenClient, _oauth2client_1$OAuth);\n  /**\n   * Google ID Token client\n   *\n   * Retrieve access token from the metadata server.\n   * See: https://developers.google.com/compute/docs/authentication\n   */\n  function IdTokenClient(options) {\n    var _this;\n    _classCallCheck(this, IdTokenClient);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(IdTokenClient).call(this));\n    _this.targetAudience = options.targetAudience;\n    _this.idTokenProvider = options.idTokenProvider;\n    return _this;\n  }\n  _createClass(IdTokenClient, [{\n    key: \"getRequestMetadataAsync\",\n    value: function () {\n      var _getRequestMetadataAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      url) {\n        var idToken, headers;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!this.credentials.id_token || (this.credentials.expiry_date || 0) < Date.now())) {\n                _context.next = 5;\n                break;\n              }\n              _context.next = 3;\n              return this.idTokenProvider.fetchIdToken(this.targetAudience);\n            case 3:\n              idToken = _context.sent;\n              this.credentials = {\n                id_token: idToken,\n                expiry_date: this.getIdTokenExpiryDate(idToken)\n              };\n            case 5:\n              headers = {\n                Authorization: 'Bearer ' + this.credentials.id_token\n              };\n              return _context.abrupt(\"return\", {\n                headers: headers\n              });\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function getRequestMetadataAsync(_x) {\n        return _getRequestMetadataAsync.apply(this, arguments);\n      }\n      return getRequestMetadataAsync;\n    }()\n  }, {\n    key: \"getIdTokenExpiryDate\",\n    value: function getIdTokenExpiryDate(idToken) {\n      var payloadB64 = idToken.split('.')[1];\n      if (payloadB64) {\n        var payload = JSON.parse(Buffer.from(payloadB64, 'base64').toString('ascii'));\n        return payload.exp * 1000;\n      }\n    }\n  }]);\n  return IdTokenClient;\n}(oauth2client_1.OAuth2Client);\nexports.IdTokenClient = IdTokenClient;","map":null,"metadata":{},"sourceType":"script"}