{"ast":null,"code":"\"use strict\";\n\n// Copyright 2018 Google LLC\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//    http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _regeneratorRuntime = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _classCallCheck = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Gaxios = void 0;\nvar extend_1 = __importDefault(require(\"extend\"));\nvar https_1 = require(\"https\");\nvar node_fetch_1 = __importDefault(require(\"node-fetch\"));\nvar querystring_1 = __importDefault(require(\"querystring\"));\nvar is_stream_1 = __importDefault(require(\"is-stream\"));\nvar url_1 = require(\"url\");\nvar common_1 = require(\"./common\");\nvar retry_1 = require(\"./retry\");\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar fetch = hasFetch() ? window.fetch : node_fetch_1.default;\nfunction hasWindow() {\n  return typeof window !== 'undefined' && !!window;\n}\nfunction hasFetch() {\n  return hasWindow() && !!window.fetch;\n}\nfunction hasBuffer() {\n  return typeof Buffer !== 'undefined';\n}\nfunction hasHeader(options, header) {\n  return !!getHeader(options, header);\n}\nfunction getHeader(options, header) {\n  header = header.toLowerCase();\n  for (var _i = 0, _Object$keys = Object.keys((options === null || options === void 0 ? void 0 : options.headers) || {}); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    if (header === key.toLowerCase()) {\n      return options.headers[key];\n    }\n  }\n  return undefined;\n}\nvar HttpsProxyAgent;\nfunction loadProxy() {\n  var _a, _b, _c, _d;\n  var proxy = ((_a = process === null || process === void 0 ? void 0 : process.env) === null || _a === void 0 ? void 0 : _a.HTTPS_PROXY) || ((_b = process === null || process === void 0 ? void 0 : process.env) === null || _b === void 0 ? void 0 : _b.https_proxy) || ((_c = process === null || process === void 0 ? void 0 : process.env) === null || _c === void 0 ? void 0 : _c.HTTP_PROXY) || ((_d = process === null || process === void 0 ? void 0 : process.env) === null || _d === void 0 ? void 0 : _d.http_proxy);\n  if (proxy) {\n    HttpsProxyAgent = require('https-proxy-agent');\n  }\n  return proxy;\n}\nloadProxy();\nfunction skipProxy(url) {\n  var _a;\n  var noProxyEnv = (_a = process.env.NO_PROXY) !== null && _a !== void 0 ? _a : process.env.no_proxy;\n  if (!noProxyEnv) {\n    return false;\n  }\n  var noProxyUrls = noProxyEnv.split(',');\n  var parsedURL = new url_1.URL(url);\n  return !!noProxyUrls.find(function (url) {\n    if (url.startsWith('*.') || url.startsWith('.')) {\n      url = url.replace(/^\\*\\./, '.');\n      return parsedURL.hostname.endsWith(url);\n    } else {\n      return url === parsedURL.origin || url === parsedURL.hostname;\n    }\n  });\n}\n// Figure out if we should be using a proxy. Only if it's required, load\n// the https-proxy-agent module as it adds startup cost.\nfunction getProxy(url) {\n  // If there is a match between the no_proxy env variables and the url, then do not proxy\n  if (skipProxy(url)) {\n    return undefined;\n    // If there is not a match between the no_proxy env variables and the url, check to see if there should be a proxy\n  } else {\n    return loadProxy();\n  }\n}\nvar Gaxios = /*#__PURE__*/function () {\n  /**\n   * The Gaxios class is responsible for making HTTP requests.\n   * @param defaults The default set of options to be used for this instance.\n   */\n  function Gaxios(defaults) {\n    _classCallCheck(this, Gaxios);\n    this.agentCache = new Map();\n    this.defaults = defaults || {};\n  }\n  /**\n   * Perform an HTTP request with the given options.\n   * @param opts Set of HTTP options that will be used for this HTTP request.\n   */\n  _createClass(Gaxios, [{\n    key: \"request\",\n    value: function () {\n      var _request2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var opts,\n          _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};\n              opts = this.validateOpts(opts);\n              return _context.abrupt(\"return\", this._request(opts));\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function request() {\n        return _request2.apply(this, arguments);\n      }\n      return request;\n    }()\n  }, {\n    key: \"_defaultAdapter\",\n    value: function () {\n      var _defaultAdapter2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(opts) {\n        var fetchImpl, res, data;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              fetchImpl = opts.fetchImplementation || fetch;\n              _context2.next = 3;\n              return fetchImpl(opts.url, opts);\n            case 3:\n              res = _context2.sent;\n              _context2.next = 6;\n              return this.getResponseData(opts, res);\n            case 6:\n              data = _context2.sent;\n              return _context2.abrupt(\"return\", this.translateResponse(opts, res, data));\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function _defaultAdapter(_x) {\n        return _defaultAdapter2.apply(this, arguments);\n      }\n      return _defaultAdapter;\n    }()\n    /**\n     * Internal, retryable version of the `request` method.\n     * @param opts Set of HTTP options that will be used for this HTTP request.\n     */\n  }, {\n    key: \"_request\",\n    value: function () {\n      var _request3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var opts,\n          translatedResponse,\n          err,\n          _yield,\n          shouldRetry,\n          config,\n          _args3 = arguments;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              opts = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n              _context3.prev = 1;\n              if (!opts.adapter) {\n                _context3.next = 8;\n                break;\n              }\n              _context3.next = 5;\n              return opts.adapter(opts, this._defaultAdapter.bind(this));\n            case 5:\n              translatedResponse = _context3.sent;\n              _context3.next = 11;\n              break;\n            case 8:\n              _context3.next = 10;\n              return this._defaultAdapter(opts);\n            case 10:\n              translatedResponse = _context3.sent;\n            case 11:\n              if (opts.validateStatus(translatedResponse.status)) {\n                _context3.next = 13;\n                break;\n              }\n              throw new common_1.GaxiosError(\"Request failed with status code \".concat(translatedResponse.status), opts, translatedResponse);\n            case 13:\n              return _context3.abrupt(\"return\", translatedResponse);\n            case 16:\n              _context3.prev = 16;\n              _context3.t0 = _context3[\"catch\"](1);\n              err = _context3.t0;\n              err.config = opts;\n              _context3.next = 22;\n              return (0, retry_1.getRetryConfig)(err);\n            case 22:\n              _yield = _context3.sent;\n              shouldRetry = _yield.shouldRetry;\n              config = _yield.config;\n              if (!(shouldRetry && config)) {\n                _context3.next = 28;\n                break;\n              }\n              err.config.retryConfig.currentRetryAttempt = config.retryConfig.currentRetryAttempt;\n              return _context3.abrupt(\"return\", this._request(err.config));\n            case 28:\n              throw err;\n            case 29:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[1, 16]]);\n      }));\n      function _request() {\n        return _request3.apply(this, arguments);\n      }\n      return _request;\n    }()\n  }, {\n    key: \"getResponseData\",\n    value: function () {\n      var _getResponseData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(opts, res) {\n        var data;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.t0 = opts.responseType;\n              _context4.next = _context4.t0 === 'stream' ? 3 : _context4.t0 === 'json' ? 4 : _context4.t0 === 'arraybuffer' ? 9 : _context4.t0 === 'blob' ? 10 : 11;\n              break;\n            case 3:\n              return _context4.abrupt(\"return\", res.body);\n            case 4:\n              _context4.next = 6;\n              return res.text();\n            case 6:\n              data = _context4.sent;\n              try {\n                data = JSON.parse(data);\n              } catch (_a) {\n                // continue\n              }\n              return _context4.abrupt(\"return\", data);\n            case 9:\n              return _context4.abrupt(\"return\", res.arrayBuffer());\n            case 10:\n              return _context4.abrupt(\"return\", res.blob());\n            case 11:\n              return _context4.abrupt(\"return\", res.text());\n            case 12:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function getResponseData(_x2, _x3) {\n        return _getResponseData.apply(this, arguments);\n      }\n      return getResponseData;\n    }()\n    /**\n     * Validates the options, and merges them with defaults.\n     * @param opts The original options passed from the client.\n     */\n  }, {\n    key: \"validateOpts\",\n    value: function validateOpts(options) {\n      var opts = (0, extend_1.default)(true, {}, this.defaults, options);\n      if (!opts.url) {\n        throw new Error('URL is required.');\n      }\n      // baseUrl has been deprecated, remove in 2.0\n      var baseUrl = opts.baseUrl || opts.baseURL;\n      if (baseUrl) {\n        opts.url = baseUrl + opts.url;\n      }\n      opts.paramsSerializer = opts.paramsSerializer || this.paramsSerializer;\n      if (opts.params && Object.keys(opts.params).length > 0) {\n        var additionalQueryParams = opts.paramsSerializer(opts.params);\n        if (additionalQueryParams.startsWith('?')) {\n          additionalQueryParams = additionalQueryParams.slice(1);\n        }\n        var prefix = opts.url.includes('?') ? '&' : '?';\n        opts.url = opts.url + prefix + additionalQueryParams;\n      }\n      if (typeof options.maxContentLength === 'number') {\n        opts.size = options.maxContentLength;\n      }\n      if (typeof options.maxRedirects === 'number') {\n        opts.follow = options.maxRedirects;\n      }\n      opts.headers = opts.headers || {};\n      if (opts.data) {\n        var isFormData = typeof FormData === 'undefined' ? false : (opts === null || opts === void 0 ? void 0 : opts.data) instanceof FormData;\n        if (is_stream_1.default.readable(opts.data)) {\n          opts.body = opts.data;\n        } else if (hasBuffer() && Buffer.isBuffer(opts.data)) {\n          // Do not attempt to JSON.stringify() a Buffer:\n          opts.body = opts.data;\n          if (!hasHeader(opts, 'Content-Type')) {\n            opts.headers['Content-Type'] = 'application/json';\n          }\n        } else if (typeof opts.data === 'object') {\n          // If www-form-urlencoded content type has been set, but data is\n          // provided as an object, serialize the content using querystring:\n          if (!isFormData) {\n            if (getHeader(opts, 'content-type') === 'application/x-www-form-urlencoded') {\n              opts.body = opts.paramsSerializer(opts.data);\n            } else {\n              // } else if (!(opts.data instanceof FormData)) {\n              if (!hasHeader(opts, 'Content-Type')) {\n                opts.headers['Content-Type'] = 'application/json';\n              }\n              opts.body = JSON.stringify(opts.data);\n            }\n          }\n        } else {\n          opts.body = opts.data;\n        }\n      }\n      opts.validateStatus = opts.validateStatus || this.validateStatus;\n      opts.responseType = opts.responseType || 'json';\n      if (!opts.headers['Accept'] && opts.responseType === 'json') {\n        opts.headers['Accept'] = 'application/json';\n      }\n      opts.method = opts.method || 'GET';\n      var proxy = getProxy(opts.url);\n      if (proxy) {\n        if (this.agentCache.has(proxy)) {\n          opts.agent = this.agentCache.get(proxy);\n        } else {\n          // Proxy is being used in conjunction with mTLS.\n          if (opts.cert && opts.key) {\n            var parsedURL = new url_1.URL(proxy);\n            opts.agent = new HttpsProxyAgent({\n              port: parsedURL.port,\n              host: parsedURL.host,\n              protocol: parsedURL.protocol,\n              cert: opts.cert,\n              key: opts.key\n            });\n          } else {\n            opts.agent = new HttpsProxyAgent(proxy);\n          }\n          this.agentCache.set(proxy, opts.agent);\n        }\n      } else if (opts.cert && opts.key) {\n        // Configure client for mTLS:\n        if (this.agentCache.has(opts.key)) {\n          opts.agent = this.agentCache.get(opts.key);\n        } else {\n          opts.agent = new https_1.Agent({\n            cert: opts.cert,\n            key: opts.key\n          });\n          this.agentCache.set(opts.key, opts.agent);\n        }\n      }\n      return opts;\n    }\n    /**\n     * By default, throw for any non-2xx status code\n     * @param status status code from the HTTP response\n     */\n  }, {\n    key: \"validateStatus\",\n    value: function validateStatus(status) {\n      return status >= 200 && status < 300;\n    }\n    /**\n     * Encode a set of key/value pars into a querystring format (?foo=bar&baz=boo)\n     * @param params key value pars to encode\n     */\n  }, {\n    key: \"paramsSerializer\",\n    value: function paramsSerializer(params) {\n      return querystring_1.default.stringify(params);\n    }\n  }, {\n    key: \"translateResponse\",\n    value: function translateResponse(opts, res, data) {\n      // headers need to be converted from a map to an obj\n      var headers = {};\n      res.headers.forEach(function (value, key) {\n        headers[key] = value;\n      });\n      return {\n        config: opts,\n        data: data,\n        headers: headers,\n        status: res.status,\n        statusText: res.statusText,\n        // XMLHttpRequestLike\n        request: {\n          responseURL: res.url\n        }\n      };\n    }\n  }]);\n  return Gaxios;\n}();\nexports.Gaxios = Gaxios;","map":null,"metadata":{},"sourceType":"script"}