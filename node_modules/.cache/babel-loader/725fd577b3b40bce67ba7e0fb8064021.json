{"ast":null,"code":"\"use strict\";\n\n// Copyright 2022 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nvar _regeneratorRuntime = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\nvar _asyncToGenerator = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\nvar _createClass = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\nvar _classCallCheck = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\nvar _possibleConstructorReturn = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\nvar _getPrototypeOf = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\nvar _inherits = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\nvar _assertThisInitialized = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/assertThisInitialized\");\nvar _wrapNativeSuper = require(\"/Users/shivampanwar/Desktop/GoFood/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/wrapNativeSuper\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PluggableAuthClient = exports.ExecutableError = void 0;\nvar baseexternalclient_1 = require(\"./baseexternalclient\");\nvar executable_response_1 = require(\"./executable-response\");\nvar pluggable_auth_handler_1 = require(\"./pluggable-auth-handler\");\n/**\n * Error thrown from the executable run by PluggableAuthClient.\n */\nvar ExecutableError = /*#__PURE__*/function (_Error) {\n  _inherits(ExecutableError, _Error);\n  function ExecutableError(message, code) {\n    var _this;\n    _classCallCheck(this, ExecutableError);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ExecutableError).call(this, \"The executable failed with exit code: \".concat(code, \" and error message: \").concat(message, \".\")));\n    _this.code = code;\n    Object.setPrototypeOf(_assertThisInitialized(_assertThisInitialized(_this)), (this instanceof ExecutableError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n  return ExecutableError;\n}(_wrapNativeSuper(Error));\nexports.ExecutableError = ExecutableError;\n/**\n * The default executable timeout when none is provided, in milliseconds.\n */\nvar DEFAULT_EXECUTABLE_TIMEOUT_MILLIS = 30 * 1000;\n/**\n * The minimum allowed executable timeout in milliseconds.\n */\nvar MINIMUM_EXECUTABLE_TIMEOUT_MILLIS = 5 * 1000;\n/**\n * The maximum allowed executable timeout in milliseconds.\n */\nvar MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS = 120 * 1000;\n/**\n * The environment variable to check to see if executable can be run.\n * Value must be set to '1' for the executable to run.\n */\nvar GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES = 'GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES';\n/**\n * The maximum currently supported executable version.\n */\nvar MAXIMUM_EXECUTABLE_VERSION = 1;\n/**\n * PluggableAuthClient enables the exchange of workload identity pool external credentials for\n * Google access tokens by retrieving 3rd party tokens through a user supplied executable. These\n * scripts/executables are completely independent of the Google Cloud Auth libraries. These\n * credentials plug into ADC and will call the specified executable to retrieve the 3rd party token\n * to be exchanged for a Google access token.\n *\n * <p>To use these credentials, the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment variable\n * must be set to '1'. This is for security reasons.\n *\n * <p>Both OIDC and SAML are supported. The executable must adhere to a specific response format\n * defined below.\n *\n * <p>The executable must print out the 3rd party token to STDOUT in JSON format. When an\n * output_file is specified in the credential configuration, the executable must also handle writing the\n * JSON response to this file.\n *\n * <pre>\n * OIDC response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:id_token\",\n *   \"id_token\": \"HEADER.PAYLOAD.SIGNATURE\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * SAML2 response sample:\n * {\n *   \"version\": 1,\n *   \"success\": true,\n *   \"token_type\": \"urn:ietf:params:oauth:token-type:saml2\",\n *   \"saml_response\": \"...\",\n *   \"expiration_time\": 1620433341\n * }\n *\n * Error response sample:\n * {\n *   \"version\": 1,\n *   \"success\": false,\n *   \"code\": \"401\",\n *   \"message\": \"Error message.\"\n * }\n * </pre>\n *\n * <p>The \"expiration_time\" field in the JSON response is only required for successful\n * responses when an output file was specified in the credential configuration\n *\n * <p>The auth libraries will populate certain environment variables that will be accessible by the\n * executable, such as: GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE, GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE,\n * GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE, GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL, and\n * GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE.\n *\n * <p>Please see this repositories README for a complete executable request/response specification.\n */\nvar PluggableAuthClient = /*#__PURE__*/function (_baseexternalclient_) {\n  _inherits(PluggableAuthClient, _baseexternalclient_);\n  /**\n   * Instantiates a PluggableAuthClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid pluggable auth credential.\n   * @param options The external account options object typically loaded from\n   *   the external account JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  function PluggableAuthClient(options, additionalOptions) {\n    var _this2;\n    _classCallCheck(this, PluggableAuthClient);\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(PluggableAuthClient).call(this, options, additionalOptions));\n    if (!options.credential_source.executable) {\n      throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n    }\n    _this2.command = options.credential_source.executable.command;\n    if (!_this2.command) {\n      throw new Error('No valid Pluggable Auth \"credential_source\" provided.');\n    }\n    // Check if the provided timeout exists and if it is valid.\n    if (options.credential_source.executable.timeout_millis === undefined) {\n      _this2.timeoutMillis = DEFAULT_EXECUTABLE_TIMEOUT_MILLIS;\n    } else {\n      _this2.timeoutMillis = options.credential_source.executable.timeout_millis;\n      if (_this2.timeoutMillis < MINIMUM_EXECUTABLE_TIMEOUT_MILLIS || _this2.timeoutMillis > MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS) {\n        throw new Error(\"Timeout must be between \".concat(MINIMUM_EXECUTABLE_TIMEOUT_MILLIS, \" and \") + \"\".concat(MAXIMUM_EXECUTABLE_TIMEOUT_MILLIS, \" milliseconds.\"));\n      }\n    }\n    _this2.outputFile = options.credential_source.executable.output_file;\n    _this2.handler = new pluggable_auth_handler_1.PluggableAuthHandler({\n      command: _this2.command,\n      timeoutMillis: _this2.timeoutMillis,\n      outputFile: _this2.outputFile\n    });\n    return _this2;\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this calls a user provided executable which returns the subject token.\n   * The logic is summarized as:\n   * 1. Validated that the executable is allowed to run. The\n   *    GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment must be set to\n   *    1 for security reasons.\n   * 2. If an output file is specified by the user, check the file location\n   *    for a response. If the file exists and contains a valid response,\n   *    return the subject token from the file.\n   * 3. Call the provided executable and return response.\n   * @return A promise that resolves with the external subject token.\n   */\n  _createClass(PluggableAuthClient, [{\n    key: \"retrieveSubjectToken\",\n    value: function () {\n      var _retrieveSubjectToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var executableResponse, envMap, serviceAccountEmail;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!(process.env[GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES] !== '1')) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('Pluggable Auth executables need to be explicitly allowed to run by ' + 'setting the GOOGLE_EXTERNAL_ACCOUNT_ALLOW_EXECUTABLES environment ' + 'Variable to 1.');\n            case 2:\n              executableResponse = undefined; // Try to get cached executable response from output file.\n              if (!this.outputFile) {\n                _context.next = 7;\n                break;\n              }\n              _context.next = 6;\n              return this.handler.retrieveCachedResponse();\n            case 6:\n              executableResponse = _context.sent;\n            case 7:\n              if (executableResponse) {\n                _context.next = 18;\n                break;\n              }\n              // Set up environment map with required values for the executable.\n              envMap = new Map();\n              envMap.set('GOOGLE_EXTERNAL_ACCOUNT_AUDIENCE', this.audience);\n              envMap.set('GOOGLE_EXTERNAL_ACCOUNT_TOKEN_TYPE', this.subjectTokenType);\n              // Always set to 0 because interactive mode is not supported.\n              envMap.set('GOOGLE_EXTERNAL_ACCOUNT_INTERACTIVE', '0');\n              if (this.outputFile) {\n                envMap.set('GOOGLE_EXTERNAL_ACCOUNT_OUTPUT_FILE', this.outputFile);\n              }\n              serviceAccountEmail = this.getServiceAccountEmail();\n              if (serviceAccountEmail) {\n                envMap.set('GOOGLE_EXTERNAL_ACCOUNT_IMPERSONATED_EMAIL', serviceAccountEmail);\n              }\n              _context.next = 17;\n              return this.handler.retrieveResponseFromExecutable(envMap);\n            case 17:\n              executableResponse = _context.sent;\n            case 18:\n              if (!(executableResponse.version > MAXIMUM_EXECUTABLE_VERSION)) {\n                _context.next = 20;\n                break;\n              }\n              throw new Error(\"Version of executable is not currently supported, maximum supported version is \".concat(MAXIMUM_EXECUTABLE_VERSION, \".\"));\n            case 20:\n              if (executableResponse.success) {\n                _context.next = 22;\n                break;\n              }\n              throw new ExecutableError(executableResponse.errorMessage, executableResponse.errorCode);\n            case 22:\n              if (!this.outputFile) {\n                _context.next = 25;\n                break;\n              }\n              if (executableResponse.expirationTime) {\n                _context.next = 25;\n                break;\n              }\n              throw new executable_response_1.InvalidExpirationTimeFieldError('The executable response must contain the `expiration_time` field for successful responses when an output_file has been specified in the configuration.');\n            case 25:\n              if (!executableResponse.isExpired()) {\n                _context.next = 27;\n                break;\n              }\n              throw new Error('Executable response is expired.');\n            case 27:\n              return _context.abrupt(\"return\", executableResponse.subjectToken);\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function retrieveSubjectToken() {\n        return _retrieveSubjectToken.apply(this, arguments);\n      }\n      return retrieveSubjectToken;\n    }()\n  }]);\n  return PluggableAuthClient;\n}(baseexternalclient_1.BaseExternalAccountClient);\nexports.PluggableAuthClient = PluggableAuthClient;","map":null,"metadata":{},"sourceType":"script"}